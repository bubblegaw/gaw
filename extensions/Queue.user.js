// ==UserScript==
// @name         Queue
// @namespace    https://greatawakening.win
// @version      2.0
// @description  more modding, less time
// @author       Smash
// @include      https://greatawakening.win/queue*
// @require      https://code.jquery.com/jquery-3.5.1.min.js
// @connect      cloudflare.com
// @connect      authentication.win
// @connect      greatawakening.win
// @grant        GM_xmlhttpRequest
// ==/UserScript==

/* globals jQuery, $ */

//GLOBAL VARIABLES
var log = {
    last_conflict: Date.now(),
    actioned: {}
};
var op = {
    my_account: $('.active a:first').html().trim(),
    activity: Date.now(),
    //isIdle: ()=>{return false}
    isIdle: ()=>{return Date.now() > op.activity + 90000}
};
var message_count = 0;

// accounts[author] = {history: , modnotes:  , banned: }
var accounts = {};

const notification = new Audio("data:audio/ogg;base64,");
const new_mail = new Audio("data:audio/ogg;base64,");
const URL_SHORTNERS = ['9m.no', '1link.in', '1url.com', '2big.at', '2pl.us', '2tu.us', '2ya.com', '4url.cc', '6url.com', 'a.gg', 'a.nf', 'a2a.me', 'abbrr.com', 'adjix.com', 'AltURL.com', 'atu.ca', 'b23.ru', 'bacn.me', 'bit.ly', 'bkite.com', 'bloat.me', 'BudURL.com', 'buk.me', 'BurnURL.com', 'C-O.IN', 'chilp.it', 'clck.ru', 'cli.gs', 'ClickMeter.com', 'cort.as', 'cuturl.com', 'cutt.ly', 'decenturl.com', 'DecentURL.com', 'dfl8.me', 'DigBig.com', 'Digg.com', 'doiop.com', 'DwarfURL.com', 'dy.fi', 'EasyURI.com', 'EasyURL.net', 'eepurl.com', 'EsyURL.com', 'ewerl.com', 'fa.b', 'ff.im', 'fff.to', 'Fhurl.com', 'fire.to', 'firsturl.de', 'flic.kr', 'Fly2.ws', 'fon.gs', 'fwd4.me', 'gl.am', 'go.9nl.com', 'go2.me', 'go2cut.com', 'goo.gl', 'goshrink.com', 'GoWat.ch', 'gri.ms', 'gurl.es', 'hellotxt.com', 'hex.io', 'hover.com', 'href.in', 'htxt.it', 'hugeurl.com', 'Hurl.it', 'hurl.me', 'hurl.ws', 'icanhaz.com', 'idek.net', 'inreply.to', 'is.gd', 'IsCool.net', 'iterasi.net', 'jijr.com', 'jmp2.net', 'Just.as', 'kissa.be', 'kl.am', 'klck.me', 'korta.nu', 'krunchd.com', 'liip.to', 'liltext.com', 'lin.cr', 'linkbee.com', 'linkbun.ch', 'liurl.cn', 'ln-s.net', 'ln-s.ru', 'lnk.gd', 'lnk.in', 'loopt.us', 'lru.jp', 'lt.tl', 'lurl.no', 'metamark.net', 'migre.me', 'minilien.com', 'miniurl.com', 'minurl.fr', 'moourl.com', 'MyURL.in', 'ne1.net', 'njx.me', 'nn.nf', 'notlong.com', 'nsfw.in', 'o-x.fr', 'om.ly', 'ow.ly', 'pd.am', 'pic.gd    tweetphoto', 'ping.fm', 'PiURL.com', 'pnt.me', 'poprl.com', 'post.ly', 'posted.at', 'Profile.to', 'qicute.com', 'QLNK.net', 'Quip-Art.com', 'rb6.me', 'rebrand.ly', 'RedirX.com', 'ri.ms', 'rickroll.it', 'riz.gd', 'rsmonkey.com', 'ru.ly', 'rubyurl.com', 's7y.us    shrinkify', 'safe.mn', 'Sharein.com', 'sharetabs.com', 'shorl.com', 'short.ie', 'short.to', 'ShortLinks.co.uk', 'shortna.me', 'shorturl.\\w+', 'Shrinkify.com', 'shrinkster.com', 'shrt.st', 'shrten.com', 'shrunkin.com', 'shw.me', 'SimURL.com', 'sn.im', 'snipr.com', 'snipurl.com', 'snurl.com', 'sp2.ro', 'spedr.com', 'sqrl.it', 'StartURL.com', 'sturly.com', 'su.pr', 'tcrn.ch', 'thrdl.es', 'TightURL.com', 'tiny.cc', 'tiny.pl', 'tiny123.com', 'tinyarro.ws', 'tinytw.it', 'tinyuri.ca', 'tinyurl.com', 'tinyvid.io', 't.ly', 'Tnij.org', 'to.ly', 'togoto.us', 'tr.im', 'tr.my', 'TraceURL.com', 'turo.us', 'tweetburner.com', 'twirl.at', 'twit.ac', 'twitterpan.com', 'twitthis.com', 'twiturl.de', 'twurl.cc', 'twurl.nl', 'u.mavrev.com', 'u.nu', 'u6e.de', 'ub0.cc', 'updating.me', 'unblckr.\\w+', 'ur1.ca', 'url.co.uk', 'URL.ie', 'url4.eu', 'urlao.com', 'urlbrief.com', 'urlcover.com', 'urlcut.com', 'urlenco.de', 'URLHawk.com', 'urlkiss.com', 'urlot.com', 'urlpire.com', 'urlx.ie', 'urlx.org', 'urlzen.com', 'virl.com', 'vl.am', 'w3t.org', 'WapURL.co.uk', 'wipi.es', 'wp.me', 'x.se', 'xaddr.com', 'XeeURL.com', 'xr.com', 'xrl.in', 'xrl.us', 'xurl.jp', 'xzb.cc', 'Yep.it', 'yfrog.com', 'yweb.com', 'zi.ma', 'zi.pe', 'zipmyurl.com', 'zz.gd'];
const FLAGGED_DOMAINS = new RegExp('(' + [

    'amazon.com',
    'amren.com',
    'change.org',
    'dailystormer.su',
    'ebay.com',
  	'etsy.com',
    'gofundme.com',
  	'gf.me',
  	'fightback.law',
  	'fundly.com',
  	'kickstarter.com',
    'linkedin.com',
    'patreon.com',
    'stormfront.org',
    'vdare.com',
  	'tumblr.com',
  	'blogspot.com',
  	'ariuum.com',
  	'mikeflynndefensefund.org',
  	'petitions.whitehouse.gov',
  	'christiansfortruth.com',
  	'qmap.pub',
  	'voat.co',
  	'disq.us',
  	'rite.ly',
  	'fast-redirecting.com',
  	'sharfly.com',
  	'yerl.org',
  	'givesendgo.com'

].concat(URL_SHORTNERS).join('|').replace(/\./g, '\\.').replace(/\*/g, '\\.*') + ')$', 'i');


const BANNED_WORDS = [

  'nigger'

];

const FILTER = {

    'trump': [

		'\\b45\\b',
        ' DJ?T ',
        'CHEETO',
        'DEAR LEADER',
        'DONN(EY|IE)',
        'GEOTUS',
        'GOD EMPEROR',
        'ORANGE (MAN|ONE)',
        'POTUS',
        'PRESIDENT',
        '[TD]RUMPF?T?',
        'VERY STABLE GENIUS',
        'VSG',
        'zion don',

    ],

    'mods': [

        'admins? ',
        ' ban(ned|s)? ',
        'censor(ship)?',
        'free speech',
        'group ?think',
        'mod(s|eration)? ',
        'removed?',
        'this site',
      	'wrong ?think',

    ],

    'pedes': [

        '(2|two) (scoops|terms)',
        '2A |2nd amendment',
        'aloha snakbar',
        'asshoes?',
        'big league',
        'big mike',
        'bill clinton is a rapist',
        'btfo',
        'clown world',
        'corn ?pop',
        'crooked',
        'didn\\\'t kill (him|her)self',
        'deus valt',
        'feels good man',
        ' frens? ',
        'gulags?',
        '(hand|shot)?gun',
        'helicopter rides?',
        '(high|low) energy',
        'honk (fucking )?honk',
        'infowars( ?dot ?|\\.)com',
        'jeb!',
        'john miller',
        ' kag ',
        '(top )?kek',
        'libtards?',
        'lock h(im|er) up',
        'madman',
        'maga',
      	'meme magic',
        'molon labe',
        'no breaks',
        'no refunds',
        'normies?',
        'NPCs?',
        'Pedes?',
        'Pepes?',
      	'pepperidge farms?',
        'prayers?',
        ' rall(y|ies) ',
        'redacted',
        ' ree+s? ',
        'rifles?',
        'salt mining|mining for salt',
        'seth rich',
        'Shariablue',
        'shitpost(ing|s)?',
        'SJWs?',
        'snow ?flakes?',
        'soros',
        'swamp',
        'take (his|her|their) coats?',
        ' T_?D(W|\\.win)? ',
        'the ?donald',
        'the wall',
        'upvotes?',
        '\\.win',
        'winning',
        'yeets?',

    ],

	'vaxx': [
		'clots?',
		'covid',
		'fauci',
		' flu ',
		'heart',
		'j&j',
		'myocarditis',
		'palpitations?',
		'phizer',
		'shot',
		'strokes?',
		'vaccines?',
		'virus',
		'vaxx',
		'wuflu',
	],

    'racism': [

        '"""',
        '👃',
        '[\\(\\{\\[\\"]{2,}|[\\)\\}\\]]{2,}',
        '109',
        '(109|119|190) countries',
        '13 5\\d',
        '3rd world',
        '6 million',
        '88',
        ' adl ',
      	'african?s?',
      	'aipac',
      	'(anti-?)?semitic',
      	'(anti-?)?semites?',
        ' ape ',
        'ashekenazi',
        'baby dicks?',
        'baby penis(es)?',
        'banker',
        'bergs?',
        ' blacks? ',
        'blood[ -]eating',
        'bolsheviks?',
        'brown',
        'burning coal',
        'central bank(ing)',
        'chimp(ing)? out',
        'chimps?',
        'chinks?',
        'chosen people',
        'chosenites',
        'circumcisions?',
        'civnat',
        'coal burner',
        'coin clippers?',
        'coincidence',
        'cohen',
        'colored',
        'coons?',
        'cry out',
        'did nothing wrong',
      	'dindus?',
        'dual citizen',
        'early life',
        ' elf ',
        ' elves ',
        'europa',
        ' ews ',
        '\\bews\\b',
        'ethnic',
        'every.{0,4}\s*(single.{0,4}\s*)?time.{0,4}',
        'final solution',
        'for no reason at all',
        'foreskin',
        'gas chamber',
        'globalists?',
        'globohomo',
        'goblin',
        'gorilla',
        'gorillion',
        'goyim',
        'göyîm',
        '(?!goya)goy(im)?s?',
        'greatest allies',
        'greatest ally',
        'greatest ?story',
        'groid',
        'hadrian',
        'h[be]{3,}',
      	'himey',
        'hitler',
        'holocaust',
        'holodomor',
        'holohaux',
        'holohoax',
        'hook nosed?',
        'hook-nosed?',
        'i\'?m sick of',
        'injuns?',
        'israel',
        'japs?',
        ' jared ',
        'Jemima',
        '(?!jewel.*)[jg]ew.*?\\b',
        'jidf',
        'jigaboos?',
      	'jogger(let)?s?',
        'joos?',
        'jq',
        'juice',
        'kabbal',
        'kalergi',
        'kikes?',
        'knuckle draggers?',
        'koreans?',
        'last name',
        'levin',
        'mandingos?',
        'masters?',
        ' miga ',
        'minority',
        '\\bmoils?\\b',
        'monkeys?',
        'moshe',
        'mossad',
        'name the jew',
        'nationalists?',
        'nazis?',
        'negro(es)?',
        ' nos(es?|ing)',
        'noticing things',
        '(?!night.*)nig.*?\\b',
        '[nf]?[i1o]g+[e3]rs?',
        'n i g e r',
        'n i g g e r',
        'no reason at all',
        ' nogs? ',
        'nignogs?',
        'nsdap',
        'nuggle',
        'n.gg.rs?',
        'y?our masters?',
        ' oven',
        'o[iy]+ ve[iy]+',
        'parasite',
        'pattern',
        'patton',
        'penis[- ]eating',
        'Pharisees?',
        'pilpul',
        ' race',
        ' rabbis? ',
        'hand rubbers?',
        'reich',
        ' riggers? ',
        'rothschild',
        'sabbath',
        'shekels?',
        'shitskin',
        's+h+i+e+t+',
        'shoah',
        'shut it down',
        'shylocks?',
        '(en)?slave(s|ry)?',
        'slopes?',
        'small hats?',
        'smooth brain',
        'soros',
        'spear chucker',
        ' spics? ',
        'steins?',
        'talmud',
        'tel aviv',
        'tiny hats?',
        'tribe',
        'uss liberty',
        'usury',
        'wakandans?',
        'weimar',
      	'wetbacks?',
        '(?!white house) whites? ',
        'who\'?s behind',
        'you know who',
        'you know why',
        'zhid',
        'zion(ists?|ism)?',
        'zipper head',
		' zog ',
		'zyklon',
    ],

	'fighting': [
		'asshat',
		'\\bbot\\b',
		'\\bboy\\b',
		'conspiracy theorists?',
		'cool',
		'deport',
		'\\b(my )dick\\b',
		'dipshit',
		'do some research',
		'eat shit',
		'faggot',
		'fuck off',
		'glowie',
		'idiot',
		'\\blame\\b',
		'larp',
		'lolbertarian',
		'muh',
		'need a link',
		'quit',
		'retard',
		'seethe',
		'shithead',
		'smoke a cock',
		'stop being lazy',
		'stormfag',
		'troll',
		'two weeks',
		'yawn',
		'you are',
		'you\'re',
        'you guys',
        'you people',
	],

	'sexism': [
		'barefoot',
		'bitch',
		'blonde?s?',
		'chauvinis(t|m)',
		'cunts?',
		'daughters?',
		'emotion(al)?',
		'gender quotas?',
		'feminazis?',
		'her place',
		'horo?monal',
		'horo?mones',
		'kitchens?',
		'lesbians?',
		'on her period',
		'positions of power',
		'pregnant',
		'repeal (the )?19(th)?',
		'sears catalogs?',
		'single moms?',
		'stay at home',
		'talk back',
		'time of (the )?month',
		'woman',
        'women',
        'whore',
	],

    'commies': [

        'automation',
        'climate( change)?',
		'dear leader',
		'drump?f?h?.*?\\b',
		'fauxnews',
        'global warming',
        'goalpost',
        'goal post',
        'healthcare',
        '(ad )?hominem',
        'liberals?',
        'medic(are|aid)',
        'new deal',
		'orange (one|man)',
        'poor',
        'pro life',
        'rich',
        'right winger',
        'safe spaces?',
        'science',
        'socialism',
        'strawm(a|e)n',
		'trumpybear',
        ' UBI |Universal Basic Income',
        'vaccine',
        'wages?',
        'xenophob(es?|ic)',

    ],

    'violence': [

		'9mm',
		'action',
        'ammo',
        'ammunition',
        'armed',
        'arson',
        'beat',
        'blood',
        'boo*g',
        'boogalo*',
      	'bullets?',
      	'burn',
      	'dea(d|th)s?',
      	'destroy',
        ' dies?',
        'execute(d|s)?',
      	'executing',
      	'fight',
      	'from (his|your) chair',
      	'gun',
		' h[au]ng',
		'inevitable',
		'liberty tree',
      	'lynch(es)?',
      	' kill(er)?',
        'militia',
      	'(in )?minecraft',
      	'murders?',
      	'neck',
      	'organizes?',
      	'organizing',
      	'rebellions?',
      	'resist',
      	'revolutions?',
      	'rifles?',
      	'rise up',
      	' ropes?',
      	'sho*t',
		'shotguns?',
      	'slit',
      	'staying home',
      	'stern letter',
      	'sternly',
      	'tank',
      	'threat',
      	'tree of liberty',
      	'violence',
      	'violent',
      	'vote harder',
      	' wars?',
      	'weapons?',


    ],

	'voting': [
		'voting',
		'vote',
	],

    'politicians': [

        'AOC',
      	'barry soetoro',
        'bernie',
        'beto',
        'biden',
        'bush',
        'buttigieg',
        'cast',
        'clinton',
        'cortez',
        'cruz',
        'cuomo',
        'desantis',
        'gavin',
        '[hk]illary',
        'jeb\\!?',
        '(sleepy )?joe',
        'kamala',
        'kemp',
        'lion ted',
        'lyin\'? ted',
        'mccain',
        'nancy',
        'nadler',
        'newsom',
        '[o0]b(ama|ongo|ummer)',
        'omar',
        'paul',
        'pelosi',
        'poll',
        'romney',
        'rubio',
        'sanders',
        'schiff',
        'schumer',
        'tlaib',
        'tulsi',
        'vote',
        'voting',
        'yang',

    ]
};

const HIGHLIGHT = [...new Set(Object.values(FILTER).reduce((combined, newArray) => combined.concat(newArray), BANNED_WORDS))];

$(document).on('click', '.body', ()=>{ op.activity=Date.now() })

function update_title(author) {
    var actionable = $('.comment-list:visible, .post-list:visible').length;
    var punted = $('#punted > div').length;
    document.title = '['+ actionable + ':' + punted + '] QUEUE';
    if (author) {
        $(`.a_${author.toString().replace(/\//g, '\\/')} .reported_posts`).html('x'+ ($(`.a_${author.toString().replace(/\//g, '\\/')}`).length));
    }
    if ( !($('#top_item > div').length) ) {
        $('#sort_container')
            .find('.post-list, .comment-list')
            .not('#excluded > >')
            .first()
            .appendTo($('#top_item'));
        expand();
    }
}

function expand() {
    let content = $('#top_item > > .post').find('.content:first');
    if (content.attr('data-opened') != null) {
      return;
    }
    content.attr("data-opened", true);
    if (content.find('img').first().length && content.find('img').first().attr('src') === '') {
      content.find('img').first().attr('src', content.find('img').first().data('src'));
    } else if (content.find('.video-container').first().length) {
      if ($.trim(content.find('.video-container').first().html()) === '') {
        if (content.find('.video-container').first().hasClass('mp4')) {
          content.find('.video-container').first().append('<video controls>\n' +
            '<source src="' + content.find('.video-container').first().data('src') + '" type="video/mp4">\n' +
            'Your browser does not support videos.\n' +
            '</video>');
        } else {
          content.find('.video-container').first().append('<iframe src="' + content.find('.video-container').first().data('src') + '" frameborder="0" allowfullscreen></iframe>');
        }
      } else {
        content.find('iframe').remove();
      }
    }
    content.find('img').first().removeAttr('data-src');
    content.find('img').first().removeData('src');
    content.slideToggle(function() {
      content.removeAttr('data-opened');
    });
}


function sort_order() {

    switch ( $('#SortOrder').text() ) {

        case 'normal sort':
            $('#SortOrder').html('reverse sort')
            break;

        case 'reverse sort':
            $('#SortOrder').html('normal sort')
            break;
    }

    sort_div = $('#sort_container');
    sort_div.children().each(function(i,li){sort_div.prepend(li)});
    sort_div.append( $('#collisions') );
    sort_div.append( $('#excluded') );
}
$(document).on('click', '#SortOrder', sort_order);

function punt() {
    if ( $(this).closest('#skipped').length ) {
        var author = $(this).closest('.comment, .post').data('author');
        $('#punted').append( $(`.a_${author.toString().replace(/\//g, '\\/')}`) );
    }
    else {
        $('#punted').append( $(this).closest('.post-list, .comment-list') );
    }

    update_title();
}
$(document).on('click', '[data-action=punt]', punt);

function skip() {
    var author = $(this).closest('.comment, .post').data('author');
    $('#skipped').append( $(`.a_${author.toString().replace(/\//g, '\\/')}`) );
    update_title();
}
$(document).on('click', '[data-action=skip]', skip);

function ban(){
    var author = $(this).closest('.comment, .post').data('author'),
        token = $('meta[name="_csrf"]').attr('content'),
        content = "";
    function popup(name, head, subline, content, mod) {
        var container;
        if ($('.popup').length) {
            $('.popup, .shade').remove();
        }
        if (subline !== '') {
            subline = '<div class="subline">' + subline + '</div>\n';
        }
        if (typeof mod !== "undefined") {
            mod = ' ' + mod;
        }
        else {
            mod = '';
        }
        container = $('<div class="popup-' + name + mod + ' popup">\n' +
                '<div class="inner">\n' +
                '<a class="close" href="javascript:void(0);">&#10006;</a>\n' +
                '<div class="head">' + head + '</div>\n' +
                subline +
                '<div class="options">\n' +
                content + '\n' +
                '</div>\n' +
                '</div>\n' +
                '</div>');
        $('body').prepend(container);
        $('body').prepend('<div class="shade"></div>');
    }
    function clear(){
        $(`.a_${author.toString().replace(/\//g, '\\/')}`).remove();
        op.activity = Date.now();
        update_title();
    }

    $.ajax({
        url: '/ban_status',
        type: 'POST',
        context: this,
        data: {
            target: author,
            community: $("meta[name='community']").attr("content")
        },
        success: function (result) {
            if (result.status === 'This user is banned.') {
                content = '<p class="notice">' + result.status + '</p>';
            }
            content += '<form method="POST" class="form ban" action="/ban">\n' +
                '<input name="referrer" type="hidden" value="' + window.location.href + '">\n' +
                '<input type="hidden" name="_csrf" value="' + token + '">\n' +
                '<input type="hidden" name="target" value="' + author + '">\n' +
                '<input type="number" min="0" max="365" name="days" placeholder="time (days, 0 = perm)" value="0" required>\n' +
                '<label><input type="checkbox" name="nuke" checked>Nuke</label>\n' +
                '<label><input type="checkbox" name="ip">IP Ban</label>\n' +
                '<textarea id="ban_message" type="text" name="reason" placeholder="reason" required>bye faggot</textarea>\n' +
                '<input type="submit" id="submit" value="Ban">\n' +
                '</form>';
            popup('ban', 'Ban User', '/u/' + author, content, 'no-wrap');
            $('input#submit').click(clear);
            //$('form.ban').submit(clear);
            //$('#ban_message').select().focus();
            $('#submit').focus();
        }
    });
}
$(document).on('click', '.spam', ban);


function button_press() {
    let author = $(this).closest('.comment, .post').data('author');
    $(this).closest('.comment-list, .post-list').remove();
    update_title(author);
}
$(document).on('click', 'a[data-action="approve"], a[data-action="remove"]', button_press);

async function highlight(node) {
    function return_match(match) {
        var leading = match.charAt(0);
        var ending = match.charAt(match.length - 1);
        return (leading.match(/[^A-Za-z0-9]/) ? leading + '<span class="highlight">' : '<span class="highlight">' + leading) +
            match.slice(1, -1) +
            (ending.match(/[^A-Za-z0-9]/) ? '</span>' + ending : ending + '</span>');
    };

    var search = new RegExp('(' + HIGHLIGHT.join('|').replace(/ /g, '[^A-Za-z]') + ')', 'ig');
    var highlight_this = node.find('.rendered, .text .inner');

  	highlight_this.each(function() {
      	var element = $(this);

      	if (element[0].hasAttribute('href')) {
            element.html(element.html().replace(search, return_match));
            return true;
        }

        //CONVERT ANCHOR TO SPAN
        var links = [];
        element.find('a').each(function(i, e) {
            links.push(e);
            $(e).replaceWith(`<span class="link">${$(e).text()}</span>`);
        });

        //MAKE HIGHLIGHTS
        element.html(element.html().replace(search, return_match));

        //CONVERT SPAN BACK TO ANCHOR
        if (links.length) {
            element.find('span.link').each(function(i, e) {

            $(links[i]).html($(this).html());
            $(this).replaceWith($(links[i]));

            });
        };

      	if ( element.has('span.highlight').length ) {
            element.closest('.comment-list, .post-list').addClass('highlighted');
        }
    });
}

function check_links(node) {
    node.find('.inline a, .rendered a, .domain > span').each(function() {
        var href = $(this).attr('href');

      	if ( !(href) ) {
          href = '://' + $(this).html().replace(/[\(\)]/g, "");
        }

        var domain = href.match(/:\/\/([^\/]*)/);

      	if (domain && domain[1].match(FLAGGED_DOMAINS)) {
            node.find('.notes > .badlink').replaceWith(`<p class="badlink">BAD LINK</p>`)
            node.addClass('badlink');
            return false;
        }
    });

  	return node.hasClass('badlink');
}

async function get_reports() {
    let node = $('span.reports:first').closest('.post, .comment');

    if (node.length) {
        $.ajax({
            url: '/reports',
            main: true,
            type: 'GET',
            context: node,
            data: {
                id: node.data('id'),
                type: node.data('type'),
                community: $("meta[name='community']").attr("content")
            },
            success: function(result) {

                var jsonReports = result,
                    r = '<div class=\"reports\">',
                    types = {};

                $.each(jsonReports, function(i) {
                    if ( !(types[jsonReports[i].reason]) ) {
                        types[jsonReports[i].reason] = 1;
                    }
                    else {
                        types[jsonReports[i].reason] += 1;
                    }
                });

                types = Object.keys(types).map(function (key) { return [key, types[key]] }).sort(function(a,b) { return b[1] - a[1] });

                for (let i = 0; i < types.length; i++) {
                    if ( types[i][1] > 1 ) {
                        r += `<p><strong><span class="count">${types[i][1]}x</span> <span class="reason">${types[i][0]}</span></strong></p>`
                    }
                    else {
                        r += `<span class="reason">${types[i][0]}</span>${i < types.length - 1 ? " - " : ""}`;
                    }
                }

                r += '</div>';
                node.find('span.reports').replaceWith(r);

                if (types.length > 4) {
                    add_post(node.parent().addClass('HighReports').remove());
                }
            },

            error: function (jqXHR, textStatus, errorThrown) {
            console.log(jqXHR, textStatus, errorThrown);
        }
        });
    }
}
setInterval(get_reports, 500);

async function get_notes() {
	let author;
	let max = 0;
	for (const username in accounts) {
        if (accounts[username].modnotes > 0 && accounts[username].modnotes > max) {
			max = accounts[username].modnotes;
			author = username;
        }
        else if (accounts[username].modnotes * -1 >= Date.now() - 30000) {
            accounts[username].modnotes = 0;
        }
	}

	if ( author ) {

        $.ajax({
            url: '/get_note',
            type: 'GET',
            data: {
                target: author,
                community: $("meta[name='community']").attr("content")
            },
            success: function (results) {

                if ( !(results.length) ) {
                    accounts[author].modnotes = -1 * Date.now();
                    return;
                }

                accounts[author].modnotes = 0;
                var r = results[0];

                $(`.a_${author.toString().replace(/\//g, '\\/')} .notes > .modnotes`).replaceWith(`<div class="modnotes"><p class="last_note">${r.note} -${r.moderator} (${r.time})</p></div`);


                if (r.moderator == op.my_account) {
                    $(`.a_${author.toString().replace(/\//g, '\\/')} .notes > .modnotes > .last_note`).addClass('my_note');
                    return;
                }

                else if ( results.length > 1 ) {
                    $(results.slice(1,)).each(function() {
                        if (this.moderator == op.my_account) {
                            r = this;
                            $(`.a_${author.toString().replace(/\//g, '\\/')} .notes > .modnotes`).append(`<p class="my_note">${r.note} -${r.moderator} (${r.time})</p>`);
                            return false;
                        };
                    });
                }
            },

            error: function (jqXHR, textStatus, errorThrown) {
                console.log(jqXHR, textStatus, errorThrown);
            }

        });
    }
}
setInterval(get_notes, 500);

async function check_author() {

	let author;
	let max = 0;
	for (const username in accounts) {
        if (accounts[username].history > 0 && accounts[username].history > max) {
			max = accounts[username].history;
			author = username;
		}
	}

	if ( author ) {
		$.ajax({
            url: '/summary',
            main: true,
            data: {
                target: author,
                community: $("meta[name='community']").attr("content")
			},
			success: function(result) {
				let fields = result.split(' | ');
				if (fields.length == 3) {

					let time = fields[0].match(/(\d+) (\w+)/);
					let post_karma = Number(fields[1].match(/\d+/));
                    let comment_karma = Number(fields[2].match(/\d+/));
                    let age;

					if ( (time[2] == 'days' && Number(time[1] < 8)) || !( time[2].match(/day|year/i) ) || (comment_karma < 200 && post_karma < 200) ) {
                        age = `<p class="age newb">NEWB - <span class="time">${time[0]}</span> <span class="score">${post_karma}/${comment_karma}</span></p>`;
                        $(`.a_${author.toString().replace(/\//g, '\\/')}`).find('.details .author, .since .author').addClass('newb');
                    }
                    else if ( ((time[2] == 'days' && Number(time[1]) >= 100) || time[2].startsWith('year')) && (comment_karma >= 5000 || post_karma >= 5000) ) {
                        age = `<p class="age established">NO YEET</p>`;
                    }
                    else if ( comment_karma >= 25000 || post_karma >= 25000) {
                        age = `<p class="age established">NO YEET</p>`;
                    }
                    else {
                        age = `<p class="age"><span class="time">${time[0]}</span> <span class="score">${post_karma}/${comment_karma}</span></p>`;
                    }

                    $(`.a_${author.toString().replace(/\//g, '\\/')} .notes > .age`).replaceWith(age);


                    accounts[author].history = age;
				}
			}
		});
	}
}
setInterval(check_author, 500);

function sort(nodes) {
    var sorting = nodes.contents();

    var InOrder = sorting.sort(function (a, b) {
          return Number($(a).attr("length")) > Number($(b).attr("length"));
      });
    nodes.html(InOrder);
}

async function add_post(node) {

    let author = node.children(':first').data('author');
    let skipped = [...new Set( $('#skipped').find('.comment, .post').map(
        function(i, n) { return $(n).data('author'); }
    ))];
    let approved = node.find('a.approved');
    let text_node = node.find('.rendered, .inner');
    let text_length = (text_node ? text_node.text().trim().length : 0);
    let catagory = '#other';

    if (node.find('.top a.title').length) {
        text_length += node.find('.top a.title').html().trim().length;
    }

    node.attr('length', text_length);

    let short_text = 350;
    if ( text_node.length ) {
        if (text_length < short_text) {
            catagory = '#short_text';
        }
        else if (text_length >= short_text && text_length < 1000) {
            catagory = '#medium_text';
        }
        else {
            catagory = '#long_text';
        }
    }

    if ( node.find('a[data-action="expand"] .fa-camera').length ) {
        catagory = '#pictures';
    }

    if ( node.find('a[data-action="expand"] .fa-twitter').length ) {
        catagory = '#tweets';
    }

    if ( node.find('a.expand-link').length ) {
        catagory = '#links';
    }

    if ( node.find('a[data-action="expand"] .fa-video').length ) {
        catagory = '#videos';
    }

    var banned_words = new RegExp('(' + BANNED_WORDS.join('|').replace(/ /g, '[^A-Za-z]') + ')', 'ig');
    if ( node.text().match(banned_words) ) {
        catagory = "#niggers";
    }

    if ( approved.length ) {
        node.find('.approved_by').html(`<span>${approved.attr('title')}</span>`);
        catagory = '#already_approved';
    };

    if ( Number(node.find('.vote .count, .points .count').html()) > 400 ) {
        catagory = '#high_scorers';
    }

    if ( node.is('.HighReports') && !(approved.length) ) {
        catagory = '#high_reports';
    }

    if ( node.find('.post.stickied').length ) {
        catagory = '#stickies';
    }

    if ( check_links(node) ) {
        catagory = '#bad_links';
    }

    if ( node.find('.details .author, .since .author').html().trim() == 'deleted' ) {
        catagory = '#deleted';
    }

    if ( skipped.includes(author) ) {
        catagory = '#skipped';
    }

    node.appendTo(catagory);
    update_title(author);
    sort( $(catagory) );
}


function update_posts(node) {

    //MAKE CHANGES
    highlight(node);
    node.find('.details').after(`
        <div class="notes">
            <span class="approved"></span>
            <span class="modnotes"></span>
            <span class="age"></span>
            <span class="banned"></span>
            <span class="badlink"></span>
            <span class="old_post"></span>
        </div>`
    );

    //GET RID OF DEFAULT THUMBS AND ADD EXPANDS
    node.find('.inner img')
        .attr('data-action', "expand")
        .closest('.post')
        .each(function(){
            let src = $(this).find('.inner img').data('src');
            $(this)
                .find('.thumb')
                .removeClass('default-thumbnail')
                .html(
                    $(this).find('.inner img')
                    .addClass('expand')
                    .attr('src', src)
                    .clone()
                    .removeAttr('data-src')
                    );
        });

    node.find('.actions').append('<a class="pill" data-action="skip">skip</a><a class="pill" data-action="punt">punt</a>');
    node.find('a[data-action="remove"]').before('<hr>');
    node.find('a[data-action="thumb"]').remove();
	node.find('.title a, a.title, .details a.author, .since a.author, .author a, a:contains(context), a:contains(permalink), a:contains(comment)').attr('target', '_blank');

    node.find('.post-list, .comment-list').each(function(){

        let author = $(this).children(':first').data('author');

        if ($(this).is('.comment-list')) {
            $(this).attr( 'data-loglink', $(this).find('.actions > a:eq(0)').attr('href') );
        }
        else {
            $(this).attr( 'data-loglink', $(this).find('a.title').attr('href').match(/(\/p\/[^\/]+)/)[1] + "/x/c/" );
        }

        $(this).addClass( `a_${author.toString().replace(/\//g, '\\/')}`);

        //ADD COUNT
        $(this).find('.details .author, .since .author').after('<span class="reported_posts">x' + ($(`.a_${author.toString().replace(/\//g, '\\/')}`).length + 1) +'</span> ');

        //ADD QUICK BAN
        $(this).find('div.details').append('<a class="spam">spam</a>');

        //CHECK IF ALREADY APPROVED
        let approved = $(this).find('.details a.approved, .top a.approved');
        if ( approved.length ) {
            $(this).find('.notes > .approved').replaceWith(`<p class="approved">${approved.attr('title')}</p>`);
        }

        //CHECK OLD POST
        let post_date = new Date($(this).find('.since time').attr('title'));
        if (Date.now() - post_date > 24 * 60 * 60 * 1000) {
            $(this).find('.notes > .old_post').replaceWith('<p class="old_post">Post is old.</p>');
        }

        //ADD REPORTS
        $(this).find('.body').append('<span class="reports"></span>');
        $(this).find('a[data-action="reports"]').html('all reports');

        //UPDATE HISTORY
        if (author != 'deleted') {
            if ( !(accounts[author]) ) {
                accounts[author] = {history: 1, modnotes: 1, banned: false};
            }
            else {
                if (accounts[author].history > 0 ) {
                    accounts[author].history += 1;
                }
                else {
                    if (accounts[author].history.match(/NEWB/i)) {
                        $(this).find('.details .author, .since .author').addClass('newb');
                    }
                    $(this).find('.notes > .age').replaceWith(accounts[author].history);
                }
            }
        }

        //CHECK VERY RECENT MODLOG FOR BAN
        if (accounts[author].banned)
            $(this).find('.notes > .banned').replaceWith('<p>Account was recently banned</p>');

        add_post( $(this) );

   });
}


function check_queue() {

    GM_xmlhttpRequest({
        method: 'GET',
        url: 'https://greatawakening.win/queue',
        headers: {
            'User-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'en-US,en;q=0.5',
            'Connection': 'keep-alive',
            'Cache-Control': 'max-age=0',
            'Host': 'greatawakening.win',
            'TE': 'Trailers',
            'Upgrade-Insecure-Requests': 1
        },
        onload: function(xhr){


            let queue = jQuery(xhr.responseText).remove('script').find('.main-content, .nav-user');

            if ( queue.length < 2 ) {
                console.log('Queue errored out.', xhr);
                return;
            }

            //GET EXISTING IDS
            let old_ids = {};
            $('.post, .comment').each(function(){
                old_ids[ $(this).data('id') ] = $(this).parent();
            });

            //GET NEW IDS
            let new_ids = {};
            let posts = queue.find('.post-list, .comment-list');
            let top_post = $('#top_item > div').data('loglink');
            posts.find('.post, .comment').each(function(){

                let this_post;
                if ($(this).is('.comment')) {
                    this_post = $(this).find('.actions > a:eq(0)').attr('href');
                }
                else {
                    this_post = $(this).find('a.title').attr('href').match(/(\/p\/[^\/]+)/)[1] + "/x/c/";
                }

                let already_actioned = this_post && log.actioned[this_post];
                let isNotTopPost = !(top_post == this_post);
                //let i_removed_it = log.actioned[this_post] == op.my_account;
                if (already_actioned && (isNotTopPost || op.isIdle()) ) {
                    console.log(`modqueue: ${$(this).data('id')} was actioned by ${log.actioned[this_post]}`);
                    $(this).parent().remove();
                    return true;
                }

                new_ids[ $(this).data('id') ] = $(this).parent();
            });

            //NO LONGER IN THE QUEUE
            for (const key in old_ids) {
                if ( !(new_ids[key]) && (op.isIdle || !( old_ids[key].parent().is('#top_item') )) ) {
                    let author = old_ids[key].children(':first').data('author');
                    console.log(`modqueue: ${old_ids[key].children(':first').data('id')} no longer in queue.`);
                    old_ids[key].remove();
                    update_title(author);
                }
            }

            //ALREADY IN THE QUEUE
            for (const key in new_ids) {
                if ( old_ids[key] ) {
                    new_ids[key].remove();
                }
            }

            //CHECK MAIL
            $('a[title=Inbox]').replaceWith(queue.find('a[title=Inbox]').attr('target', '_blank'));
            let current_messages = Number($('.mail-indicator').data('unread'));
            if (current_messages && message_count != current_messages) {
                message_count = current_messages;
                new_mail.play();
            }

            if (queue.find('.comment, .link').length) {
                queue.find('.comment, .post').each(function(){
                    console.log(`modqueue: ${$(this).data('id')} was added`);
                });
                try {
                    notification.play();
                }
                catch { /* DO NOTHING */ };
                update_posts(queue);
            }
        },
        onerror: (err) => {console.log('Error getting modqueue:', err)}
    });
}
//setTimeout(check_queue, 10000);
setInterval(check_queue, 60000);

var checking_logs = false;
function check_log() {

    if ( op.isIdle() ) {
        checking_logs = false;
        return;
    }

    GM_xmlhttpRequest({
        method: 'GET',
        url: 'http://greatawakening.win/logs',
        headers: {
            'User-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'en-US,en;q=0.5',
            'Connection': 'keep-alive',
            'Cache-Control': 'max-age=0',
            'Host': 'greatawakening.win',
            'TE': 'Trailers',
            'Upgrade-Insecure-Requests': 1
        },
        onload: function(responseDetails) {

            checking_logs = true;

            let logs = jQuery(responseDetails.responseText).find('.log');
            //GET NON-ACTIONED URLS
            let existing = {};
            $('.post-list, .comment-list').each(function(){
                existing[ $(this).data('loglink') ] = $(this);
            });

            //RESET FOUND ACTIONS
            log.actioned = {};

            //GO THROUGH MODLOG AND FIND RECENT ACTIONS
            //REMOVE FROM MODQUEUE AND CHECK FOR CONFLICTS
            let collision = false;
            let top_post = $('#top_item > div').data('loglink');
            logs.each(function(){
                let time = Date.parse($(this).find('span:eq(0)').attr('title'));
                let mod = $(this).find('span:eq(1)').html().trim();
                let isBan = $(this).find('span:eq(2)').html().startsWith('banned');
                let user = $(this).find('span:eq(3)').html().trim();
                let this_post = $(this).find('a:eq(1)').attr('href');

                if ( !(log.actioned[this_post]) ) {
                    log.actioned[this_post] = mod;
                }

                if ( time > log.last_conflict && log.actioned[this_post] != op.my_account && mod == op.my_account ) {
                    collision = log.actioned[this_post];
                    log.last_conflict = time;
                }

                if (isBan) {
                    function mark_ban() {
                        console.log(`modlog: ${user} was banned by ${mod}`);
                        $(`.a_${user.toString().replace(/\//g, '\\/')}`).remove();
                        update_title();
                    }
                    if ( !(accounts[user]) ){
                        accounts[user] = {history: 0, modnotes: 0, banned: true};
                        mark_ban();
                    }
                    else if ( !(accounts[user].banned) ) {
                        accounts[user].banned = true;
                        mark_ban();
                    }
                }

                let already_actioned = (this_post && existing[this_post]);
                let isNotTopPost = !(top_post == this_post);
                let i_removed_it = mod == op.my_account;
                if ( already_actioned && (i_removed_it || isNotTopPost) ) {
                    console.log(`modlog: ${existing[this_post].children(':first').data('id')} actioned by ${mod}`);
                    let author = existing[this_post].children(':first').data('author');
                    existing[this_post].remove();
                    update_title(author);
                }

            });

            //IF CONFLICT SKIP THE TOP TEN POSTS
            if (collision) {
                console.log(`modlog: collided with ${collision}`);
                $('#sort_container')
                    .find('.post-list, .comment-list')
                    .not('#excluded > >')
                    .slice(0,10)
                    .attr('data-collision', Date.now())
                    .appendTo($('#collisions'));
            }

            //FILTER CONFILCTS BACK IN AFTER TWO MINUTES
            let no_more = $('#sort_container > div > div').length == 0
            $('[data-collision]').each(function() {
                if ( no_more || Number($(this).data('collision') < Date.now() - 120000) ) {
                    $(this).removeAttr('data-collision');
                    add_post( $(this) );
                }
            });




            checking_logs = false;
        },
        onerror: (err) => {
            console.log('Error getting logs:', err)
            checking_logs = false;
        }

    });
}

//ADD CSS
$('body').append(`
<style>
    div.content > div.inner {
        color: black;
    }
    body.theme-dark .main-content div.content > div.inner {
        color: #ddd;
    }
    pre {
        white-space: pre-wrap;
    }
    .highlight {
        text-transform: uppercase;
        font-weight: bold;
        font-size: 110%;
        color: yellow;
    }
    .notes {
        font-size: 12px;
        color: red;
    }
    .age > .score {
        font-size: 10px;
        color: #818181;
    }
    .author.newb {
        font-size: 200%;
    }
    .notes > .modnotes {
        color: #818181;
    }
    .notes > .modnotes .my_note {
        color: red;
        font-weight: bold;
    }
    span.reports {
        display: none;
    }
    .body > .reports > p {
        margin-bottom: 0px;
    }
    .head > a {
        margin-top: 6px;
        float: right;
        font-size: 10px;
        color: #818181;
    }
</style>
`);

(function() {
    'use strict';
    $('.head > h1').append(' - <span id="SortOrder">normal sort</span>');
    $('.main-content').append(`
        <div id="top_item"></div>
        <div id="sort_container">
            <div id="deleted"></div>
            <div id="bad_links"></div>
            <div id="stickies"></div>
            <div id="high_reports"></div>
            <div id="high_scorers"></div>
            <div id="already_approved"></div>
            <div id="niggers"></div>
            <div id="be_respectful"></div>
            <div id="short_text"></div>
            <div id="pictures"></div>
            <div id="tweets"></div>
            <div id="medium_text"></div>
            <div id="links"></div>
            <div id="videos"></div>
            <div id="long_text"></div>
            <div id="collisions"></div>
            <div id="excluded">
                <div id="skipped" style="border-top: 1px solid #b30000;"></div>
                <div id="punted" style="display: none;"></div>
            </div>
        </div>
    `);

    $('a[title=Inbox]').attr('target', '_blank');
    if (Number($('.mail-indicator').data('unread')) > 0) {
        message_count = Number($('.mail-indicator').data('unread'));
        new_mail.play();
    }
    $('.head:first').prepend(`<a href="https://greatawakening.win/logs?type=*&moderator=${op.my_account}" target="_blank">Need to undo something?</a>`)
    update_posts( $('<div class="wrapper"></div>').append( $('.post-list, .comment-list, .more, .empty.queue').remove() ) );

    setInterval(check_log, 10000);

})();

document.addEventListener('keydown', logKey);

function logKey(e) {

    if ( $('body > .popup').length ) {
        return;
    }

    let approve_key, remove_key, skip_key, punt_key, ban_key;

    switch (op.my_account) {
        case '-F-B-I-':
            approve_key = 'KeyA';
            remove_key = 'KeyS';
            skip_key = 'KeyD';
            punt_key = 'KeyP';
            ban_key = 'KeyB';
            break;
        default:
            approve_key = 'KeyA';
            remove_key = 'KeyR';
            skip_key = 'KeyS';
            punt_key = 'KeyP';
            ban_key = 'KeyB';
    }

    switch (e.code) {
        case approve_key:
            exec(()=>{$('#top_item a[data-action="approve"]').click()});
            $('#top_item > div').remove();
            break;
        case remove_key:
            exec(()=>{$('#top_item a[data-action="remove"]').click()});
            $('#top_item > div').remove();
            break;
        case skip_key:
            $('#top_item a[data-action="skip"]').click();
            break;
        case punt_key:
            $('#top_item a[data-action="punt"]').click();
            break;
        case ban_key:
            $('#top_item a.spam').click();
            break;
    }
    op.activity = Date.now()
    update_title();
}

function exec(fn) {
    var script = document.createElement('script');
    script.setAttribute("type", "application/javascript");
    script.textContent = '(' + fn + ')();';
    document.body.appendChild(script); // run the script
    document.body.removeChild(script); // clean up
}

$(window).on('beforeunload', function(){
    var c=confirm();
    if(c){
      return true;
    }
    else {
        return false;
    }
});
